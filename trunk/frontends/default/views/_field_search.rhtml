<% # We have to remove search form params before the url_for method call, otherwise it throughs it on %>
<% search_params = params %>
<% params.merge!(:search => nil) -%>
<% href = url_for(params_for(:action => :update_table, :escape => false)) -%>
<%= form_remote_tag :url => href,
                    :method => :get,
                    :before => "addActiveScaffoldPageToHistory('#{href}', '#{params[:controller]}')",
                    :after => "$('#{loading_indicator_id(:action => :search, :id => params[:id])}').style.visibility = 'visible'; Form.disable('#{search_form_id}');",
                    :complete => "$('#{loading_indicator_id(:action => :search, :id => params[:id])}').style.visibility = 'hidden'; Form.enable('#{search_form_id}');",
                    :failure => "ActiveScaffold.report_500_response('#{active_scaffold_id}')",
                    :update => active_scaffold_content_id,
                    :html => { :href => href, :id => search_form_id, :class => 'search' } %>

  <ol class="form">
    <% active_scaffold_config.field_search.columns.each do |column| -%>
  		<% name = "record[#{column.name}]" %>
  	  <li class="form-element">
  			<label for="<%= "record_#{column.name}" %>"><%= column.label %></label>
				<%= case column.ui_type
					when :boolean
            check_box_tag(name, 1, params[:record][column.name] || params[:record][column.name] == 1)
					else
						text_field_tag(name, params[:record][column.name], { :autocomplete => "off", :size => 20, :class => 'text-input', :id => "search_#{column.name}"})
					end
				%>
  		</li>
  	<% end -%>
  </ol>
  <%= submit_tag _('SEARCH_BUTTON'), :class => "submit" %>
  <a href="javascript:void(0)" class="cancel" onclick="f = this.up('form'); f.reset(); f.onsubmit();"><%= _('RESET_BUTTON') -%></a>
  <%= loading_indicator_tag(:action => :search) %>
</form>

<script type="text/javascript">
//<![CDATA[
  Form.focusFirstElement('<%= search_form_id -%>');
//]]>
</script>